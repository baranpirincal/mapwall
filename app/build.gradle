apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.vanniktech.android.apk.size'
apply plugin: "org.sonarqube"

def fabricKey = resolveProperty('fabricKey')
def googleKey = resolveProperty('googleKey')
def thunderforestKey = resolveProperty('thunderforest')

if (fabricKey != null) {
    apply plugin: 'io.fabric'
}
if (rootProject.file('signing.gradle').exists()) {
    println 'Applying release signing'
    apply from: "${rootProject.file('signing.gradle')}", to: android
} else {
    println 'Failed to apply release signing'
}

def version = '0.1'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.devindi.wallpaper"
        vectorDrawables.useSupportLibrary = true
        minSdkVersion 18
        targetSdkVersion 27
        versionCode 1
        versionName version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [fabricKey: "$fabricKey",
                                googleKey: "$googleKey",
                                thunderforestKey: "$thunderforestKey"]
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
        }

        debugProguard {
            initWith debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-debug.pro'
            matchingFallbacks = ['debug']
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    defaultConfig {
        vectorDrawables.useSupportLibrary = true
    }
}

sonarqube {
    properties {
        property "sonar.projectVersion", version
        property "sonar.host.url", resolveProperty('sonarUrl')
        property "sonar.login", resolveProperty('sonarKey')
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.bluelinelabs:conductor:2.1.4'
    implementation 'com.bluelinelabs:conductor-archlifecycle:0.1.1'
    implementation 'org.osmdroid:osmdroid-android:6.0.1'
    implementation 'org.koin:koin-android-architecture:0.9.1'
    implementation 'com.jakewharton.timber:timber:4.7.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true
    }
    implementation 'com.google.android.gms:play-services-places:15.0.0'
    implementation 'com.squareup.picasso:picasso:2.5.2'

    implementation 'com.android.support.constraint:constraint-layout:1.1.0'

    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'

    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

def resolveProperty(String key) {
    if (hasProperty(key)) return findProperty(key)
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty(key)
}
